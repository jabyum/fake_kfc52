import telebot
import buttons as bt
import database as db
# —Å–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –±–æ—Ç–∞
bot = telebot.TeleBot(token="7349504840:AAH9LF1Y0EqTsqR0S6zz6T54KRKiwbp0JAo")
users = {}
# db.add_product(pr_name="–ë—É—Ä–≥–µ—Ä –ë–∏–≥", pr_desc="–ª—É—á—à–∏–π", pr_price=50000, pr_quantity=10, pr_photo="https://vkusnotochkamenu.ru/image/cache/catalog/photo/799220868-skandinavskij-burger-600x600.png")
# db.add_product(pr_name="–ß–∏–∑–±—É—Ä–≥–µ—Ä –ë–∏–≥", pr_desc="–ª—É—á—à–∏–π —á–∏–∑–±—É—Ä–≥–µ—Ä", pr_price=60000, pr_quantity=10, pr_photo="https://vkusnotochkamenu.ru/image/cache/catalog/photo/348457690-chizburger-600x600.jpg")
# db.add_product(pr_name="–ß–∏–∑–±—É—Ä–≥–µ—Ä2", pr_desc="–ª—É—á—à–∏–π —á–∏–∑–±—É—Ä–≥–µ—Ä2", pr_price=60000, pr_quantity=0, pr_photo="https://vkusnotochkamenu.ru/image/cache/catalog/photo/348457690-chizburger-600x600.jpg")

print(db.get_all_product())
# –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
@bot.message_handler(commands=["start"])
def start(message):
    user_id = message.from_user.id
    checker = db.check_user(user_id)
    if checker == True:
        bot.send_message(user_id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ", reply_markup=bt.main_menu_kb())
    elif checker == False:
        bot.send_message(user_id, "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –≠—Ç–æ –±–æ—Ç –¥–æ—Å—Ç–∞–≤–∫–∏.\n"
                                  "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ—ë –∏–º—è")
        # —É–∫–∞–∑—ã–≤–∞—é —Å–ª–µ–¥—É—é—â–∏–π —ç—Ç–∞–ø –ø–æ—Å–ª–µ —Å—Ç–∞—Ä—Ç–∞ (—Ñ—É–Ω–∫—Ü–∏—è,
        # –∫–æ—Ç–æ—Ä–∞—è –¥–æ–ª–∂–Ω–∞ —Å—Ä–∞–±–æ—Ç–∞—Ç—å –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ /start)
        bot.register_next_step_handler(message, get_name)


def get_name(message):
    user_id = message.from_user.id
    # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏–º—è
    name = message.text
    bot.send_message(user_id, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–π –Ω–æ–º–µ—Ä", reply_markup=bt.phone_number_bt())
    # –æ—Ç–ø—Ä–∞–≤–ª—è—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ñ—É–Ω–∫—Ü–∏—é –ø–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è—é name –≤ —Å–ª–µ–¥—É—é—â–∏–π —ç—Ç–∞–ø
    bot.register_next_step_handler(message, get_number,  name)

def get_number(message, name):
    user_id = message.from_user.id
    # –ø—Ä–æ–≤–µ—Ä—è—é –∫–∞–∫ –æ—Ç–ø—Ä–∞–≤–∏–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–≤–æ–π –Ω–æ–º–µ—Ä
    if message.contact:
        # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–º–µ—Ä
        number = message.contact.phone_number
        bot.send_message(user_id, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ—é –ª–æ–∫–∞—Ü–∏—é",
                         reply_markup=bt.location_bt())
        bot.register_next_step_handler(message, get_location, name, number)
    else:
        # –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏–ª —Å–≤–æ–π –Ω–æ–º–µ—Ä, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –µ–≥–æ –≤ —ç—Ç—É —Ñ—É–Ω–∫—Ü–∏—é
        bot.send_message(user_id, '–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–π –Ω–æ–º–µ—Ä —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É',
                         reply_markup=bt.phone_number_bt())
        bot.register_next_step_handler(message, get_number, name)

def get_location(message, name, number):
    user_id = message.from_user.id
    if message.location:
        location = message.location
        bot.send_message(user_id, f"–í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ—à–ª–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é. –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ:\n"
                                  f"–ò–º—è: {name}\n"
                                  f"–ù–æ–º–µ—Ä: {number}\n"
                                  f"–õ–æ–∫–∞—Ü–∏—è: {location}\n"
                                  f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ", reply_markup=bt.main_menu_kb())
        db.add_user(user_id, name, number)
    else:
        bot.send_message(user_id, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ—é –ª–æ–∫–∞—Ü–∏—é —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É",
                         reply_markup=bt.location_bt())
        bot.register_next_step_handler(message, get_location, name, number)
@bot.callback_query_handler(lambda call: call.data in ["main_menu", "cart", "minus", "plus", "none",
                                                       "back", "to_cart"])
def all_calls(call):
    user_id = call.message.chat.id
    if call.data == "main_menu":
        bot.delete_message(user_id, call.message.message_id)
        bot.send_message(user_id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ", reply_markup=bt.main_menu_kb())
    elif call.data == "cart":
        bot.send_message(user_id, "–≤–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞")
    elif call.data == "plus":
        current_amount = users[user_id]["pr_count"]
        users[user_id]["pr_count"] += 1
        bot.edit_message_reply_markup(chat_id=user_id, message_id=call.message.message_id,
                                      reply_markup=bt.exact_product(current_amount=current_amount,
                                                                    plus_or_minus="plus"))

    elif call.data == "minus":
        current_amount = users[user_id]["pr_count"]
        if current_amount > 1:
            users[user_id]["pr_count"] -= 1
            bot.edit_message_reply_markup(chat_id=user_id, message_id=call.message.message_id,
                                          reply_markup=bt.exact_product(current_amount=current_amount,
                                                                        plus_or_minus="minus"))
        else:
            pass
    elif call.data == "none":
        pass
    elif call.data == "back":
        bot.delete_message(user_id, call.message.message_id)
        all_products = db.get_pr_id_name()
        bot.send_message(user_id, "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–¥—É–∫—Ç", reply_markup=bt.products_in(all_products))
    elif call.data == "to_cart":
        db.add_to_cart(user_id, users[user_id]["pr_id"], users[user_id]["pr_name"],
                       users[user_id]["pr_count"], users[user_id]["pr_price"])
        users.pop(user_id)
        bot.delete_message(user_id, call.message.message_id)
        all_products = db.get_pr_id_name()
        bot.send_message(user_id, "–ü—Ä–æ–¥—É–∫—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É. –í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–¥—É–∫—Ç", reply_markup=bt.products_in(all_products))








@bot.callback_query_handler(lambda call: "prod_" in call.data)
def product_call(call):
    user_id = call.message.chat.id
    bot.delete_message(user_id, call.message.message_id)
    product_id = int(call.data.replace("prod_", ""))
    product_info = db.get_exact_product(product_id)
    users[user_id] = {"pr_id": product_id, "pr_name": product_info[0], "pr_count": 1, "pr_price": product_info[1]}
    bot.send_photo(user_id, photo=product_info[3], caption=f"{product_info[0]}\n\n"
                                                           f"–û–ø–∏—Å–∞–Ω–∏–µ: {product_info[2]}\n"
                                                           f"–¶–µ–Ω–∞: {product_info[1]} —Å—É–º",
                   reply_markup=bt.exact_product())


@bot.message_handler(content_types=["text"])
def main_menu(message):
    user_id = message.from_user.id
    text = message.text
    if text == "üç¥–ú–µ–Ω—é":
        all_products = db.get_pr_id_name()
        bot.send_message(user_id, "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–¥—É–∫—Ç", reply_markup=bt.products_in(all_products))
    elif text == "üõí–ö–æ—Ä–∑–∏–Ω–∞":
        bot.send_message(user_id, "–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞")
    elif text == "‚úíÔ∏è–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤":
        bot.send_message(user_id, "–ù–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç –≤–∞—à–µ–≥–æ –æ—Ç–∑—ã–≤–∞")


bot.infinity_polling()